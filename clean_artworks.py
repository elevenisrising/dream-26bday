#!/usr/bin/env python3
"""
Clean the artworks CSV file and generate JavaScript data file
"""

import csv
import os
import re


def clean_artworks_csv():
    """Clean the artworks CSV file and create JS hardcoded data file"""
    
    input_file = "assets/artworks/artworks.csv"
    output_js = "js/artworks-data.js"
    
    # Check if input file exists
    if not os.path.exists(input_file):
        print(f"‚ùå Input file not found: {input_file}")
        return
    
    cleaned_artworks = []
    
    try:
        # Try multiple encodings in order of likelihood  
        encodings_to_try = ['utf-8', 'gbk', 'cp1252', 'latin-1', 'utf-16']
        
        file_content = None
        used_encoding = None
        
        for encoding in encodings_to_try:
            try:
                with open(input_file, 'r', encoding=encoding) as file:
                    file_content = file.read()
                    used_encoding = encoding
                    print(f"‚úì Successfully read file using encoding: {encoding}")
                    break
            except (UnicodeDecodeError, LookupError):
                print(f"‚ùå Failed to read with encoding: {encoding}")
                continue
        
        if file_content is None:
            print("‚ùå Could not read file with any encoding")
            return
        
        # Parse CSV from string content
        csv_reader = csv.reader(file_content.splitlines())
        
        # Skip header row
        next(csv_reader, None)
        
        for row_num, row in enumerate(csv_reader, start=2):
                if len(row) >= 4:
                    filename = row[0].strip()
                    artist_name = row[1].strip()
                    art_description = row[2].strip()
                    artist_link = row[3].strip()
                    
                    # Skip empty rows
                    if not filename or not artist_name:
                        print(f"‚ö†Ô∏è  Skipping row {row_num}: Missing filename or artist name")
                        continue
                    
                    # Clean artist name - remove quotes and extra whitespace
                    artist_name = artist_name.replace('"', '').strip()
                    
                    # Clean description - handle "None" values and clean text
                    if art_description.lower() in ['none', '']:
                        art_description = f"Amazing artwork by {artist_name}"
                    else:
                        art_description = art_description.replace('"', '').strip()
                        # Clean up broken unicode characters
                        art_description = re.sub(r'ÔøΩ+', '', art_description)
                        art_description = art_description.replace('ÔøΩC', '-')
                    
                    # Clean artist link
                    artist_link = artist_link.strip()
                    if not artist_link or artist_link.lower() == 'none':
                        artist_link = "#"  # Fallback link
                    
                    # Create artwork path
                    artwork_path = f"assets/artworks/{filename}"
                    
                    cleaned_artworks.append({
                        'filename': filename,
                        'artist': artist_name,
                        'description': art_description,
                        'link': artist_link,
                        'path': artwork_path
                    })
                    
                    print(f"‚úì Row {row_num}: {artist_name} -> {filename}")
                else:
                    print(f"‚ö†Ô∏è  Skipping row {row_num}: Not enough columns")
        
        # Write cleaned data directly to JavaScript file
        with open(output_js, 'w', encoding='utf-8') as file:
            file.write("// Artworks data - auto-generated by Python script\n")
            file.write("// DO NOT EDIT MANUALLY - this file is overwritten by clean_artworks.py\n\n")
            file.write("const ARTWORKS_DATA = [\n")
            
            for i, artwork in enumerate(cleaned_artworks):
                filename = artwork['filename'].replace('"', '\\"').replace("'", "\\'")
                artist = artwork['artist'].replace('"', '\\"').replace("'", "\\'")
                description = artwork['description'].replace('"', '\\"').replace("'", "\\'")
                link = artwork['link'].replace('"', '\\"').replace("'", "\\'")
                path = artwork['path'].replace('"', '\\"').replace("'", "\\'")
                
                file.write(f'    {{ ')
                file.write(f'filename: "{filename}", ')
                file.write(f'artist: "{artist}", ')
                file.write(f'description: "{description}", ')
                file.write(f'link: "{link}", ')
                file.write(f'path: "{path}" ')
                file.write(f'}}')
                
                if i < len(cleaned_artworks) - 1:
                    file.write(",")
                file.write("\n")
            
            file.write("];\n\n")
            file.write("// Export for use in main script\n")
            file.write("window.ARTWORKS_DATA = ARTWORKS_DATA;\n")
        
        print(f"\n‚úÖ Successfully processed {len(cleaned_artworks)} artworks!")
        print(f"üìÅ JS output: {output_js}")
        print(f"üìä Original file: {input_file}")
        print(f"üéØ Ready for hardcoded import - no CSV needed!")
        
        # Show some sample entries
        print(f"\nüìù Sample entries:")
        for i, artwork in enumerate(cleaned_artworks[:3]):
            print(f"   {i+1}. {artwork['artist']}: \"{artwork['filename']}\"")
            print(f"      -> {artwork['description'][:60]}...")
            
    except Exception as e:
        print(f"‚ùå Error processing CSV: {e}")

def main():
    """Main function"""
    print("üé® Starting artworks CSV cleaning process...")
    clean_artworks_csv()
    print("üéâ Cleaning complete!")

if __name__ == "__main__":
    main()